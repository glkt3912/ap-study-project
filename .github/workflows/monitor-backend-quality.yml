name: Backend Quality Monitoring (Root)

on:
  # Monitor when backend PR is merged (avoid duplicate with backend CI)
  push:
    branches: [ main ]
    paths:
      - 'ap-study-backend/**'
  # Weekly quality report
  schedule:
    - cron: '0 9 * * 1'  # Every Monday 9:00 UTC
  # Manual trigger for quality analysis
  workflow_dispatch:

defaults:
  run:
    working-directory: ap-study-backend

jobs:
  backend-quality-monitoring:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: ap_study_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.17.1'
        cache: 'npm'
        cache-dependency-path: ap-study-backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables
      run: |
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/ap_study_test" >> $GITHUB_ENV
        echo "TEST_DATABASE_URL=postgresql://test:test@localhost:5432/ap_study_test" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV

    - name: Generate Prisma Client
      run: npm run db:generate

    - name: Run database migrations
      run: npm run db:push

    - name: Run linting
      run: npm run lint

    - name: Run type check
      run: npm run type-check

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./ap-study-backend/coverage/lcov.info
        flags: backend
        name: ap-study-backend
        fail_ci_if_error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Coverage Summary
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "coverage/coverage-summary.json" ]; then
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            console.log('| Metric | Coverage | Status |');
            console.log('|--------|----------|---------|');
            console.log('| Lines | ' + total.lines.pct + '% | ' + (total.lines.pct >= 80 ? '‚úÖ' : '‚ùå') + ' |');
            console.log('| Functions | ' + total.functions.pct + '% | ' + (total.functions.pct >= 80 ? '‚úÖ' : '‚ùå') + ' |');
            console.log('| Branches | ' + total.branches.pct + '% | ' + (total.branches.pct >= 70 ? '‚úÖ' : '‚ùå') + ' |');
            console.log('| Statements | ' + total.statements.pct + '% | ' + (total.statements.pct >= 80 ? '‚úÖ' : '‚ùå') + ' |');
          " >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check coverage thresholds
      run: |
        if ! npm run test:coverage 2>&1 | grep -q "All files.*80.*80.*70.*80"; then
          echo "‚ùå Coverage thresholds not met"
          echo "::error::Coverage below required thresholds (Lines: 80%, Functions: 80%, Branches: 70%, Statements: 80%)"
          exit 1
        else
          echo "‚úÖ All coverage thresholds met"
        fi

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('./ap-study-backend/coverage/coverage-summary.json')) {
            const coverage = JSON.parse(fs.readFileSync('./ap-study-backend/coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const coverageComment = `
          ## üìä Test Coverage Report
          
          | Metric | Coverage | Status |
          |--------|----------|---------|
          | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} |
          | Functions | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '‚úÖ' : '‚ùå'} |
          | Branches | ${total.branches.pct}% | ${total.branches.pct >= 70 ? '‚úÖ' : '‚ùå'} |
          | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '‚úÖ' : '‚ùå'} |
          
          **Target Thresholds:**
          - Lines: 80% ‚ú®
          - Functions: 80% ‚ú®  
          - Branches: 70% ‚ú®
          - Statements: 80% ‚ú®
          
          > ü§ñ Auto-generated by test-coverage workflow
          `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });
          }

  quality-gate:
    runs-on: ubuntu-latest
    needs: backend-quality-monitoring
    if: always()
    
    steps:
    - name: Quality Gate Check
      run: |
        if [ "${{ needs.backend-quality-monitoring.result }}" != "success" ]; then
          echo "‚ùå Quality gate failed - tests or coverage requirements not met"
          echo "::error::Quality gate requirements not satisfied"
          exit 1
        else
          echo "‚úÖ Quality gate passed - all requirements satisfied"
        fi